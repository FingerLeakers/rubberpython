#!/usr/bin/python

from time import sleep
import sys
import re

# user variables ---

hid_device = "/dev/hidg0"

# variables ---

hid_translate= {
  "!":	["left-shift", "1"],
  "@":	["left-shift", "2"],
  "#":	["left-shift", "3"],
  "$":	["left-shift", "4"],
  "%":	["left-shift", "5"],
  "^":	["left-shift", "6"],
  "&":	["left-shift", "7"],
  "(":	["left-shift", "9"],
  ")":	["left-shift", "0"],
  "<":	["left-shift", "comma"],
  ">":	["left-shift", "period"],
  ":":	["left-shift", "semicolon"],
  "|":	["left-shift", "backslash"],
}

hid_mods = {
  "left-ctrl":		0x01,
  "right-ctrl":		0x10,
  "left-shift":		0x02,
  "right-shift":	0x20,
  "left-alt":		0x04,
  "right-alt":		0x40,
  "left-meta":		0x08,
  "right-meta":		0x80,
}

hid_table = {
  "a":	0x04,
  "b":	0x05,
  "c":	0x06,
  "d":	0x07,
  "e":	0x08,
  "f":	0x09,
  "g":	0x0a,
  "h":	0x0b,
  "i":	0x0c,
  "j":	0x0d,
  "k":	0x0e,
  "l":	0x0f,
  "m":	0x10,
  "n":	0x11,
  "o":	0x12,
  "p":	0x13,
  "q":	0x14,
  "r":	0x15,
  "s":	0x16,
  "t":	0x17,
  "u":	0x18,
  "v":	0x19,
  "w":	0x1a,
  "x":	0x1b,
  "y":	0x1c,
  "z":	0x1d,
  "1":	0x1e,
  "2":	0x1f,
  "3":	0x20,
  "4":	0x21,
  "5":	0x22,
  "6":	0x23,
  "7":	0x24,
  "8":	0x25,
  "9":	0x26,
  "0":	0x27,
  "return":	0x28,
  "enter":	0x28,
  "esc":	0x29,
  "escape":	0x29,
  "bckspc":	0x2a,
  "backspace":	0x2a,
  "tab":	0x2b,
  "space":	0x2c, " ":	0x2c,
  "minus":	0x2d, "-":	0x2d,
  "dash":	0x2d,
  "equals":	0x2e, "equal":	0x2e, "=":	0x2e,
  "lbracket":	0x2f, "[":	0x2f,
  "rbracket":	0x30, "]":	0x30,
  "backslash":	0x31, "\\":	0x31,
  "hash":	0x32, "number":	0x32, "#":	0x32,
  "semicolon":	0x33, ";":	0x33,
  "quote":	0x34,
  "backquote":	0x35,
  "tilde":	0x35, "~":	0x35,
  "comma":	0x36, ",":	0x36,
  "period":	0x37, "stop":	0x37, ".":	0x37,
  "slash":	0x38, "/":	0x38,
  "caps-lock":	0x39, "capslock":	0x39,
  "f1":		0x3a, "F1":	0x3a,
  "f2":		0x3b, "F2":	0x3b,
  "f3":		0x3c, "F3":	0x3c,
  "f4":		0x3d, "F4":	0x3d,
  "f5":		0x3e, "F5":	0x3e,
  "f6":		0x3f, "F6":	0x3f,
  "f7":		0x40, "F7":	0x40,
  "f8":		0x41, "F8":	0x41,
  "f9":		0x42, "F9":	0x42,
  "f10":	0x43, "F10":	0x43,
  "f11":	0x44, "F11":	0x44,
  "f12":	0x45, "F12":	0x45,
  "print":	0x46,
  "scroll-lock":	0x47, "scrolllock":	0x47,
  "pause":	0x48,
  "insert":	0x49,
  "home":	0x4a,
  "pageup":	0x4b, "pgup":	0x4b,
  "del":	0x4c,
  "delete":	0x4c,
  "end":	0x4d,
  "pagedown":	0x4e, "pgdown":	0x4e,
  "right":	0x4f,
  "left":	0x50,
  "down":	0x51,
  "up":		0x52,
  "num-lock":	0x53, "numlock":	0x53,
  "kp-divide":	0x54,
  "kp-multiply":	0x55, "*":	0x55,
  "kp-minus":	0x56,
  "kp-plus":	0x57, "+":	0x57,
  "kp-enter":	0x58,
  "kp-return":	0x58,
  "kp-1":	0x59,
  "kp-2":	0x5a,
  "kp-3":	0x5b,
  "kp-4":	0x5c,
  "kp-5":	0x5d,
  "kp-6":	0x5e,
  "kp-7":	0x5f,
  "kp-8":	0x60,
  "kp-9":	0x61,
  "kp-0":	0x62,
  "kp-period":	0x63,
  "kp-stop":	0x63,
  "application":	0x65,
  "power":	0x66,
  "kp-equals":	0x67,
  "kp-equal":	0x67,
  "f13":	0x68,
  "f14":	0x69,
  "f15":	0x6a,
  "f16":	0x6b,
  "f17":	0x6c,
  "f18":	0x6d,
  "f19":	0x6e,
  "f20":	0x6f,
  "f21":	0x70,
  "f22":	0x71,
  "f23":	0x72,
  "f24":	0x73,
  "execute":	0x74,
  "help":	0x75,
  "menu":	0x76,
  "select":	0x77,
  "cancel":	0x78,
  "redo":	0x79,
  "undo":	0x7a,
  "cut":	0x7b,
  "copy":	0x7c,
  "paste":	0x7d,
  "find":	0x7e,
  "mute":	0x7f,
}

default_delay = 0
last_cmd = ""

hid_dev = open(hid_device, "wb")

# functions ---

def rubber_send_raw(char, mod):
  if len(char) == 1 and char.isupper():
    mod ^= hid_mods["left-shift"]
    char = char.lower()

  hid_dev.write("%c%c%c%c%c%c%c%c" % (mod, 0, hid_table[char], 0, 0, 0, 0, 0))
  hid_dev.write("%c%c%c%c%c%c%c%c" % (0, 0, 0, 0, 0, 0, 0, 0))
  hid_dev.flush()

def rubber_send(data):
  mods = 0
  for c in data:
    if c in hid_mods:
      mods ^= hid_mods[c]
    elif c in hid_translate:
      rubber_send(hid_translate[c])
    else:
      rubber_send_raw(c, mods)

def rubber_parse(cmd):
  global default_delay
  global last_cmd

  cmd=cmd.rstrip()
  if len(cmd) <= 0:
    return

  l = cmd.split()

  # QUIT
  if (l[0] == "QUIT"):
    sys.exit(0)

  # REM
  elif (l[0] == "REM"):
    c, d = cmd.split(" ", 1)
    print "REM: " + d.rstrip()

  # DEFAULT_DELAY or DEFAULTDELAY
  elif (l[0] == "DEFAULT_DELAY" or l[0] == "DEFAULTDELAY"):
    c, d = cmd.split(" ", 1)
    default_delay = float(d)

  # DELAY
  elif (l[0] == "DELAY"):
    c, d = cmd.split(" ", 1)
    sleep(float(d)/1000)

  # STRING
  elif (l[0] == "STRING"):
    c, d = cmd.split(" ", 1)
    rubber_send(list(d.rstrip())) 

  # ENTER
  elif (l[0] == "ENTER"):
    rubber_send({"enter"}) 

  # WINDOWS or GUI
  elif (l[0] == "WINDOWS" or l[0] == "GUI"):
    c, d = cmd.split(" ", 1)
    rubber_send(["left-meta"] + list(d.rstrip())) 

  # MENU or APP
  elif (l[0] == "MENU" or l[0] == "APP"):
    rubber_send(["left-shift", "F10"]) 

  # SHIFT
  elif (l[0] == "SHIFT"):
    c, d = cmd.split(" ", 1)
    rubber_send(["left-shift"] + [d.rstrip()]) 

  # ALT
  elif (l[0] == "ALT"):
    c, d = cmd.split(" ", 1)
    rubber_send(["left-alt"] + [d.rstrip()]) 

  # CONTROL or CTRL
  elif (l[0] == "CONTROL" or l[0] == "CTRL"):
    c, d = cmd.split(" ", 1)
    rubber_send(["left-ctrl"] + [d.rstrip()]) 

  # DOWNARROW or DOWN
  elif (l[0] == "DOWNARROW" or l[0] == "DOWN"):
    rubber_send(["down"]) 

  # LEFTARROW or LEFT
  elif (l[0] == "LEFTARROW" or l[0] == "LEFT"):
    rubber_send(["left"]) 

  # RIGHTARROW or RIGHT
  elif (l[0] == "RIGHTARROW" or l[0] == "RIGHT"):
    rubber_send(["right"]) 

  # UPARROW or UP
  elif (l[0] == "UPARROW" or l[0] == "UP"):
    rubber_send(["up"]) 

  # BREAK or PAUSE
  # FIXME

  # CAPSLOCK
  elif (l[0] == "CAPSLOCK"):
    rubber_send(["caps-lock"]) 

  # DELETE
  elif (l[0] == "DELETE"):
    rubber_send(["delete"]) 

  # END
  elif (l[0] == "END"):
    rubber_send(["end"]) 

  # ESC or ESCAPE
  elif (l[0] == "ESC" or l[0] == "ESCAPE"):
    rubber_send(["escape"]) 

  # HOME
  elif (l[0] == "HOME"):
    rubber_send(["home"]) 

  # INSERT	
  elif (l[0] == "INSERT"):
    rubber_send(["insert"]) 

  # NUMLOCK
  elif (l[0] == "NUMLOCK"):
    rubber_send(["num-lock"]) 

  # PAGEUP	
  elif (l[0] == "PAGEUP"):
    rubber_send(["pageup"]) 

  # PAGEDOWN	
  elif (l[0] == "PAGEDOWN"):
    rubber_send(["pagedown"]) 

  # PRINTSCREEN
  elif (l[0] == "PRINTSCREEN"):
    rubber_send(["print"]) 

  # SCROLLLOCK
  elif (l[0] == "SCROLLLOCK"):
    rubber_send(["scroll-lock"]) 

  # SPACE
  elif (l[0] == "SPACE"):
    rubber_send(["space"]) 

  # TAB
  elif (l[0] == "TAB"):
    rubber_send(["tab"]) 

  # F1-12
  elif (re.match("F[0-9]+", l[0])):
    rubber_send([l[0]]) 

  # REPLAY
  elif (l[0] == "REPLAY"):
    c, d = cmd.split(" ", 1)
    for i in range(int(d)):
      rubber_parse(last_cmd)

  # Remember what we did
  last_cmd = cmd

  # Default delay
  if default_delay: sleep(default_delay/1000)

# main ---

for line in sys.stdin:
  l = line.split()

  rubber_parse(line)



