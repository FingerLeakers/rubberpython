#!/usr/bin/python

from time import sleep
import sys
import re
import os

# user variables ---

hid_device = "/dev/hidg0"

# variables ---

# See if LAYOUT is set, otherwise use "us" as default
try:
  layout = os.environ['LAYOUT']
except:
  layout = "us"

#print "Layout: " + layout
execfile("layout/" + layout)

exit

hid_mods = {
  "left-ctrl":		0x01,
  "right-ctrl":		0x10,
  "left-shift":		0x02,
  "right-shift":	0x20,
  "left-alt":		0x04,
  "right-alt":		0x40,
  "left-meta":		0x08,
  "right-meta":		0x80,
}

hid_table = {
  "a":	0x04, "KEY_A":	0x04,
  "b":	0x05, "KEY_B":	0x05,
  "c":	0x06, "KEY_C":	0x06,
  "d":	0x07, "KEY_D":	0x07,
  "e":	0x08, "KEY_E":	0x08,
  "f":	0x09, "KEY_F":	0x09,
  "g":	0x0a, "KEY_G":	0x0a,
  "h":	0x0b, "KEY_H":	0x0b,
  "i":	0x0c, "KEY_I":	0x0c,
  "j":	0x0d, "KEY_J":	0x0d,
  "k":	0x0e, "KEY_K":	0x0e,
  "l":	0x0f, "KEY_L":	0x0f,
  "m":	0x10, "KEY_M":	0x10,
  "n":	0x11, "KEY_N":	0x11,
  "o":	0x12, "KEY_O":	0x12,
  "p":	0x13, "KEY_P":	0x13,
  "q":	0x14, "KEY_Q":	0x14,
  "r":	0x15, "KEY_R":	0x15,
  "s":	0x16, "KEY_S":	0x16,
  "t":	0x17, "KEY_T":	0x17,
  "u":	0x18, "KEY_U":	0x18,
  "v":	0x19, "KEY_V":	0x19,
  "w":	0x1a, "KEY_W":	0x1a,
  "x":	0x1b, "KEY_X":	0x1b,
  "y":	0x1c, "KEY_Y":	0x1c,
  "z":	0x1d, "KEY_Z":	0x1d,
  "1":	0x1e, "KEY_1":	0x1e,
  "2":	0x1f, "KEY_2":	0x1f,
  "3":	0x20, "KEY_3":	0x20,
  "4":	0x21, "KEY_4":	0x21,
  "5":	0x22, "KEY_5":	0x22,
  "6":	0x23, "KEY_6":	0x23,
  "7":	0x24, "KEY_7":	0x24,
  "8":	0x25, "KEY_8":	0x25,
  "9":	0x26, "KEY_9":	0x26,
  "0":	0x27, "KEY_0":	0x27,
  "KEY_ENTER":	0x28,		"return":	0x28,	"enter":	0x28,
  "KEY_ESC":	0x29,		"esc":		0x29,	"escape":	0x29,
  "KEY_BACKSPACE":	0x2a,	"bckspc":	0x2a,	"backspace":	0x2a,
  "KEY_TAB":	0x2b,		"tab":		0x2b,
  "KEY_SPACE":	0x2c,		"space":	0x2c,	" ":		0x2c,
  "KEY_MINUS":	0x2d,		"minus":	0x2d,	"-":		0x2d,	"dash":	0x2d,
  "KEY_EQUAL":	0x2d,		"equals":	0x2e,	"equal":	0x2e,	"=":	0x2e,
  "KEY_LEFT_BRACE":	0x2f,	"lbracket":	0x2f,	"[":		0x2f,
  "KEY_RIGHT_BRACE":	0x30,	"rbracket":	0x30,	"]":		0x30,
  "KEY_BACKSLASH":	0x31,	"backslash":	0x31,	"\\":		0x31,
  "KEY_NON_US_NUM":	0x32,	"hash":		0x32,	"number":	0x32,	"#":	0x32,
  "KEY_SEMICOLON":	0x33,	"semicolon":	0x33,	";":		0x33,
  "KEY_QUOTE":		0x34,	"quote":	0x34,	"'":		0x34,
  "KEY_TILDE":		0x35,	"tilde":	0x35,	"~":		0x35,
  "KEY_COMMA":		0x36,	"comma":	0x36,	",":		0x36,
  "KEY_PERIOD":		0x37,	"period":	0x37,	"stop":		0x37,	".":	0x37,
  "KEY_SLASH":		0x38,	"slash":	0x38,	"/":		0x38,
  "KEY_CAPS_LOCK":	0x39,	"caps-lock":	0x39,	"capslock":	0x39,
  "KEY_F1":		0x3a,	"f1":		0x3a,	"F1":		0x3a,
  "KEY_F2":		0x3b,	"f2":		0x3b,	"F2":		0x3b,
  "KEY_F3":		0x3c,	"f3":		0x3c,	"F3":		0x3c,
  "KEY_F4":		0x3d,	"f4":		0x3d,	"F4":		0x3d,
  "KEY_F5":		0x3e,	"f5":		0x3e,	"F5":		0x3e,
  "KEY_F6":		0x3f,	"f6":		0x3f,	"F6":		0x3f,
  "KEY_F7":		0x40,	"f7":		0x40,	"F7":		0x40,
  "KEY_F8":		0x41,	"f8":		0x41,	"F8":		0x41,
  "KEY_F9":		0x42,	"f9":		0x42,	"F9":		0x42,
  "KEY_F10":		0x43,	"f10":		0x43,	"F10":		0x43,
  "KEY_F11":		0x44,	"f11":		0x44,	"F11":		0x44,
  "KEY_F12":		0x45,	"f12":		0x45,	"F12":		0x45,
  "KEY_PRINTSCREEN":	0x46,	"print":	0x46,
  "KEY_SCROLL_LOCK":	0x47,	"scroll-lock":	0x47,	"scrolllock":	0x47,
  "KEY_PAUSE":		0x48,	"pause":	0x48,
  "KEY_INSERT":		0x49,	"insert":	0x49,
  "KEY_HOME":		0x4a,	"home":		0x4a,
  "KEY_PAGEUP":		0x4b,	"pageup":	0x4b,	"pgup":		0x4b,
  "KEY_DELETE":		0x4c,	"del":		0x4c,	"delete":	0x4c,
  "KEY_END":		0x4d,	"end":		0x4d,
  "KEY_PAGEDOWN":	0x4e,	"pagedown":	0x4e,	"pgdown":	0x4e,
  "KEY_RIGHT":		0x4f,	"right":	0x4f,
  "KEY_LEFT":		0x50,	"left":		0x50,
  "KEY_DOWN":		0x51,	"down":		0x51,
  "KEY_UP":		0x52,	"up":		0x52,
  "KEY_NUM_LOCK":	0x53,	"num-lock":	0x53,	"numlock":	0x53,
  "KEYPAD_SLASH":	0x54,	"kp-divide":	0x54,
  "KEYPAD_ASTERIX":	0x55,	"kp-multiply":	0x55,	"*":		0x55,
  "KEYPAD_MINUS":	0x56,	"kp-minus":	0x56,
  "KEYPAD_PLUS":	0x57,	"kp-plus":	0x57,	"+":		0x57,
  "KEYPAD_ENTER":	0x58,	"kp-enter":	0x58,	"kp-return":	0x58,
  "KEYPAD_1":		0x59,	"kp-1":		0x59,
  "KEYPAD_2":		0x5a,	"kp-2":		0x5a,
  "KEYPAD_3":		0x5b,	"kp-3":		0x5b,
  "KEYPAD_4":		0x5c,	"kp-4":		0x5c,
  "KEYPAD_5":		0x5d,	"kp-5":		0x5d,
  "KEYPAD_6":		0x5e,	"kp-6":		0x5e,
  "KEYPAD_7":		0x5f,	"kp-7":		0x5f,
  "KEYPAD_8":		0x60,	"kp-8":		0x60,
  "KEYPAD_9":		0x61,	"kp-9":		0x61,
  "KEYPAD_0":		0x62, 	"kp-0":		0x62,
  "KEYPAD_PERIOD":	0x63,	"kp-period":	0x63,	"kp-stop":	0x63,
  "NON-US-100":		0x64,	"non-us-100":	0x64,
  "KEY_APP":		0x65,	"application":	0x65,
  "KEY_POWER":		0x66,	"power":	0x66,
  "KEYPAD_EQUALS":	0x67,	"kp-equals":	0x67,	"kp-equal":	0x67,
  "KEY_F13":		0x68,	"f13":		0x68,
  "KEY_F14":		0x69,	"f14":		0x69,
  "KEY_F15":		0x6a,	"f15":		0x6a,
  "KEY_F16":		0x6b,	"f16":		0x6b,
  "KEY_F17":		0x6c,	"f17":		0x6c,
  "KEY_F18":		0x6d,	"f18":		0x6d,
  "KEY_F19":		0x6e,	"f19":		0x6e,
  "KEY_F20":		0x6f,	"f20":		0x6f,
  "KEY_F21":		0x70,	"f21":		0x70,
  "KEY_F22":		0x71,	"f22":		0x71,
  "KEY_F23":		0x72,	"f23":		0x72,
  "KEY_F24":		0x73,	"f24":		0x73,
  "KEY_EXE":		0x74,	"execute":	0x74,
  "KEY_HELP":		0x75,	"help":		0x75,
  "KEY_MENU":		0x76,	"menu":		0x76,
  "KEY_SELECT":		0x77,	"select":	0x77,
  "KEY_STOP":		0x78,	"cancel":	0x78,
  "KEY_AGAIN":		0x79,	"redo":		0x79,
  "KEY_UNDO":		0x7a,	"undo":		0x7a,
  "KEY_CUT":		0x7b,	"cut":		0x7b,
  "KEY_COPY":		0x7c,	"copy":		0x7c,
  "KEY_PASTE":		0x7d,	"paste":	0x7d,
  "KEY_FIND":		0x7e,	"find":		0x7e,
  "mute":	0x7f,

  "KEY_LEFT_CTRL":	0xe0,
  "KEY_LEFT_SHIFT":	0xe1,
  "KEY_LEFT_ALT":	0xe2,
  "KEY_LEFT_GUI":	0xe3,
  "KEY_COMMAND":	0xe3,
  "KEY_RIGHT_CTRL":	0xe4,
  "KEY_RIGHT_SHIFT":	0xe5,
  "KEY_RIGHT_ALT":	0xe6,
  "KEY_RIGHT_GUI":	0xe7,
}

default_delay = 0
cdelay = 0
last_cmd = ""

hid_dev = open(hid_device, "wb")

# functions ---

def rubber_send_raw(char, mod):
  if len(char) == 1 and char.isupper():
    mod ^= hid_mods["left-shift"]
    char = char.lower()

  hid_dev.write("%c%c%c%c%c%c%c%c" % (mod, 0, hid_table[char], 0, 0, 0, 0, 0))
  hid_dev.write("%c%c%c%c%c%c%c%c" % (0, 0, 0, 0, 0, 0, 0, 0))
  hid_dev.flush()

def rubber_send(data):
  mods = 0
  for c in data:
    if c in hid_mods:
      mods ^= hid_mods[c]
    elif c in hid_translate:
      rubber_send(hid_translate[c])
    else:
      rubber_send_raw(c, mods)
    # Wait between characters
    if cdelay > 0: sleep(cdelay/1000)

def rubber_parse(cmd):
  global cdelay
  global default_delay
  global last_cmd

  cmd=cmd.rstrip()
  if len(cmd) <= 0:
    return

  l = cmd.split()

  # QUIT
  if (l[0] == "QUIT"):
    sys.exit(0)

  # REM
  elif (l[0] == "REM"):
    c, d = cmd.split(" ", 1)
    print "REM: " + d.rstrip()

  # DEFAULT_DELAY or DEFAULTDELAY
  elif (l[0] == "DEFAULT_DELAY" or l[0] == "DEFAULTDELAY"):
    c, d = cmd.split(" ", 1)
    default_delay = float(d)

  # DELAY
  elif (l[0] == "DELAY"):
    c, d = cmd.split(" ", 1)
    sleep(float(d)/1000)

  # STRING
  elif (l[0] == "STRING"):
    c, d = cmd.split(" ", 1)
    rubber_send(list(d.rstrip())) 

  # STRING_DELAY
  elif (l[0] == "STRING_DELAY"):
    c, t, d = cmd.split(" ", 2)
    cdelay = float(t)
    rubber_send(list(d.rstrip())) 
    cdelay = 0

  # ENTER
  elif (l[0] == "ENTER"):
    rubber_send({"enter"}) 

  # WINDOWS or GUI
  elif (l[0] == "WINDOWS" or l[0] == "GUI"):
    c, d = cmd.split(" ", 1)
    rubber_send(["left-meta"] + list(d.rstrip())) 

  # MENU or APP
  elif (l[0] == "MENU" or l[0] == "APP"):
    rubber_send(["left-shift", "F10"]) 

  # SHIFT
  elif (l[0] == "SHIFT"):
    c, d = cmd.split(" ", 1)
    rubber_send(["left-shift"] + [d.rstrip()]) 

  # ALT
  elif (l[0] == "ALT"):
    c, d = cmd.split(" ", 1)
    rubber_send(["left-alt"] + [d.rstrip()]) 

  # CONTROL or CTRL
  elif (l[0] == "CONTROL" or l[0] == "CTRL"):
    c, d = cmd.split(" ", 1)
    rubber_send(["left-ctrl"] + [d.rstrip()]) 

  # DOWNARROW or DOWN
  elif (l[0] == "DOWNARROW" or l[0] == "DOWN"):
    rubber_send(["down"]) 

  # LEFTARROW or LEFT
  elif (l[0] == "LEFTARROW" or l[0] == "LEFT"):
    rubber_send(["left"]) 

  # RIGHTARROW or RIGHT
  elif (l[0] == "RIGHTARROW" or l[0] == "RIGHT"):
    rubber_send(["right"]) 

  # UPARROW or UP
  elif (l[0] == "UPARROW" or l[0] == "UP"):
    rubber_send(["up"]) 

  # BREAK or PAUSE
  # FIXME

  # CAPSLOCK
  elif (l[0] == "CAPSLOCK"):
    rubber_send(["caps-lock"]) 

  # DELETE
  elif (l[0] == "DELETE"):
    rubber_send(["delete"]) 

  # END
  elif (l[0] == "END"):
    rubber_send(["end"]) 

  # ESC or ESCAPE
  elif (l[0] == "ESC" or l[0] == "ESCAPE"):
    rubber_send(["escape"]) 

  # HOME
  elif (l[0] == "HOME"):
    rubber_send(["home"]) 

  # INSERT	
  elif (l[0] == "INSERT"):
    rubber_send(["insert"]) 

  # NUMLOCK
  elif (l[0] == "NUMLOCK"):
    rubber_send(["num-lock"]) 

  # PAGEUP	
  elif (l[0] == "PAGEUP"):
    rubber_send(["pageup"]) 

  # PAGEDOWN	
  elif (l[0] == "PAGEDOWN"):
    rubber_send(["pagedown"]) 

  # PRINTSCREEN
  elif (l[0] == "PRINTSCREEN"):
    rubber_send(["print"]) 

  # SCROLLLOCK
  elif (l[0] == "SCROLLLOCK"):
    rubber_send(["scroll-lock"]) 

  # SPACE
  elif (l[0] == "SPACE"):
    rubber_send(["space"]) 

  # TAB
  elif (l[0] == "TAB"):
    rubber_send(["tab"]) 

  # F1-12
  elif (re.match("F[0-9]+", l[0])):
    rubber_send([l[0]]) 

  # REPLAY
  elif (l[0] == "REPLAY"):
    c, d = cmd.split(" ", 1)
    for i in range(int(d)):
      rubber_parse(last_cmd)

  # Remember what we did
  last_cmd = cmd

  # Default delay
  if default_delay: sleep(default_delay/1000)

# main ---

for line in sys.stdin:
  l = line.split()

  rubber_parse(line)



